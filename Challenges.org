
* Evaluating Expressions

** Comparisons on types other than numbers
#+begin_quote
Would you extend Lox to support comparing other types?
#+end_quote

No

#+begin_quote
Justify your choices and compare them to other languages.
#+end_quote

While comparisons between different data types enables you to define a
total ordering in heterogeneous collections, it is mostly unintuitive
(what does "apple" < 42 mean?), adds complexity and makes the code
harder to reason about.

Seems like old Python and Javascript allows it while most others
discourage if not downright disallow it.

** Enable "scone" + 4
See branch excercise/7.2

** Divide a number by zero
#+begin_quote
What happens right now if you divide a number by zero? What do you
think should happen? Justify your choice. How do other languages you
know handle division by zero, and why do they make the choices they
do?

Change the implementation in visitBinaryExpr() to detect and report a
runtime error for this case.
#+end_quote

*** What happens right now if you divide a number by zero?
#+begin_src lox
  > 1/0==1/0
  true
#+end_src

Java, the underlying implementation language, returns Infinity if you
divide a float by 0. This apparently [[https://stackoverflow.com/a/12954429][due to the IEEE-754 standard]].
This stamdard encourages robust programs and throwing exceptions is
apprently counter to that.

*** What do you think should happen?
I think it should throw an exception.

*** How do other languages handle division by zero?
Different languages handle division by zero in these main ways:

1. Runtime Exception (Java, Python, C#, Common Lisp (sort of)):
- Throws ArithmeticException or ZeroDivisionError
- Clear indication of error
- Allows error handling via try-catch

2. Special Values (JavaScript, C/C++):
- Returns Infinity or NaN for floating-point
- Fast execution without exception overhead
- Matches IEEE 754 floating-point standard
- Can silently propagate errors

3. Undefined Behavior (C/C++ for integer division):
- No guarantees about program behavior
- Maximizes performance
- Puts responsibility on programmer

Most modern languages choose runtime exceptions because they:
- Make errors explicit
- Prevent silent failure
- Aid debugging
- Follow principle of *fail-fast*

*** Change the implementation to report a runtime error
See excercise/7.3 for the implementation.
* Statements and State
** TODO REPL support
The REPL no longer supports entering a single expression and
automatically printing its result value. That’s a drag. Add support to
the REPL to let users type in both statements and expressions. If they
enter a statement, execute it. If they enter an expression, evaluate
it and display the result value.

*** Solution
1. Either have to do a "cover grammar" as he calls it, i.e. a grammer
   that allows both statements and expressions.
2. Or catch an parse error and try to interpret it as an expression
3. Or, better yet, change the Stmt interface so that the visitor
   returns an Object, juts like the Expr visitor. Then make sure the
   ExprStmt returns the value, the BlockStmt returns the value of the
   last statement and all the other statements return null. Then just
   print the value if one was returned.

** TODO Variable initialization
Maybe you want Lox to be a little more explicit about variable
initialization. Instead of implicitly initializing variables to nil,
make it a runtime error to access a variable that has not been
initialized or assigned to, as in:

#+begin_src lox
// No initializers.
var a;
var b;

a = "assigned";
print a; // OK, was assigned first.

print b; // Error!
#+end_src

*** Solution
Use some undef value to indicate a variable has not been assigned a
value.

** DONE Use variable in declaration initialization
CLOSED: [2025-04-10 Do 14:32]
What does the following program do?

#+begin_src lox
var a = 1;
{
  var a = a + 2;
  print a;
}
#+end_src

What did you expect it to do? Is it what you think it should do? What
does analogous code in other languages you are familiar with do? What
do you think users will expect this to do?

#+begin_src clojure
> (let [a 1] (let [a (+ a 2)] a))
3
#+end_src

In clojure (and probably any scheme) it works quite naturally.

#+begin_src python
def inner():
  global a
  a = a + 2
  print(a)

a = 1
inner()
#+end_src

Python seems a bit weird as it doesn't really have block scope
independent of functions. If you use assign a variable in a function
that exists outside you have to declare as global. Maybe to avoid
mistakes.

* Control Flow
** DONE Branching statements using functions and dynamic dispatch

*** First-class functions

This concept can be expressed very elegantly in Clojure:

#+begin_src clojure
((get {true then-fn false else-fn} condition) args)
;; or more idiomatically
(({true then-fn false else-fn} condition) args)
#+end_src

*** Dynamic dispatch

This is used in Smalltalk - true and false are singleton objects of
classes True and False, and control structures like ifTrue:ifFalse:
are implemented as messages to these boolean objects.

#+begin_src python
  class TrueValue:
      def execute(self):
          return then_fn()

  class FalseValue:
      def execute(self):
          return else_fn()

  condition = TrueValue

  condition.execute()
#+end_src

** DONE Looping using functions and dynamic dispatch

*** First-class functions

#+begin_src scheme
  (define (my-while condition body)
    (when (condition)
      (body)
      (my-while condition body)))
#+end_src

**** Provided the interpreter supports an important optimization

Most likely this technique requires tail-call-optimization to avoid
overflowing the call stack.

Scheme uses this technique.

*** Dynamic dispatch

We could have a class that encapsulates the state of the loop and do
dynamic dispatch on the class. Something along the lines of

#+begin_src python
  class Continue:
      def loop(self, condition, body):
          body()
          if condition:
              return self  # continue looping
          else:
              return Break()

  class Break:
      def loop(self, condition, body):
          return self  # stop looping
#+end_src

** DONE Break statement
Unlike Lox, most other C-style languages also support break and
continue statements inside loops. Add support for break statements.

Use exceptions to jump out of a while loop.

Add a Break Stmt. Parse it in the parser. The visit method of the
break statement should throw a Break Exception. This exception is then
caught in the visitWhileStmt method.

If the Break Exception is thrown outside of a loop then the enhanced
interpret method of the Interpreter class wil catch it and report a
run time error.

See the excercise/9.3 branch for the implementation.

* Functions
** DONE Runtime arity check
CLOSED: [2025-06-11 Mi 14:02]
Our interpreter carefully checks that the number of arguments passed
to a function matches the number of parameters it expects. Since this
check is done at runtime on every call, it has a performance cost.
Smalltalk implementations don’t have that problem. Why not?

Apparently, according to Claude the arity is part of the function
signature in Smalltalk (well, method signature really). So invoking a
function with the wrong number of params is actually invoking a
different (possibly non-existing) function.

** TODO Anonymous functions
Lox’s function declaration syntax performs two independent operations.
It creates a function and also binds it to a name. This improves
usability for the common case where you do want to associate a name
with the function. But in functional-styled code, you often want to
create a function to immediately pass it to some other function or
return it. In that case, it doesn’t need a name.

Languages that encourage a functional style usually support anonymous
functions or lambdas—an expression syntax that creates a function
without binding it to a name. Add anonymous function syntax to Lox so
that this works:

#+begin_src lox
  fun thrice(fn) {
    for (var i = 1; i <= 3; i = i + 1) {
      fn(i);
    }
  }

  thrice(fun (a) {
    print a;
  });
  // "1".
  // "2".
  // "3".
#+end_src

How do you handle the tricky case of an anonymous function expression
occurring in an expression statement:

#+begin_src lox
  fun () {};
#+end_src

** DONE Scope of function parameters
CLOSED: [2025-06-12 Do 10:58]
Is this program valid?

#+begin_src lox
  fun scope(a) {
    var a = "local";
  }
#+end_src

In other words, are a function’s parameters in the same scope as its
local variables, or in an outer scope? What does Lox do? What about
other languages you are familiar with? What do you think a language
should do?

Yes, of course it is valid. The params are defined in the very same
environment as the local variables. AFAIK all languages do it that
way. I think it should be that way. Maybe you could have a more
explicit scoping with let blocks.

Well, hold it in Scheme you have an environment for the function but
defining local variables requires a let block which of course creates
a new environment. So in Scheme local vars and function parameters
live in different environments.
* Resolving and Binding
** TODO Eager binding of function names

#+begin_quote
Why is it safe to eagerly define the variable bound to a function’s
name when other variables must wait until after they are initialized
before they can be used?
#+end_quote

Contrary to variable declaration the function declaration creates the
value and the binding in one atomic step, so the variable refering to
the function is initialized right away

Why is the following code not working?

#+begin_src lox
  fun print_foo() {
    print "foo";
  }

  {
    fun foo() {
      print_foo();
    }

    foo();

    fun print_foo() {
      print "bar";
    }

    foo();
  }
#+end_src

** DONE How do other languages handle self-references in initializers for local vars
CLOSED: [2025-06-12 Do 14:16]

#+begin_quote
How do other languages you know handle local variables that refer to
the same name in their initializer, like:
#+end_quote

#+begin_src lox
var a = "outer";
{
  var a = a;
}
#+end_src

#+begin_quote
Is it a runtime error? Compile error? Allowed? Do they treat global
variables differently? Do you agree with their choices? Justify your
answer.
#+end_quote

- Clojure allows it if the name is defined in an outer scope
- Python allows it if you define the variable with "global a"
  otherwise raises an UnboundLocalError

According to Claude

- JavaScript apparently allows it, returning =undefined=
- Rust apparently prohibits it at compile time like Lox
- Java apparently allows it for instance fields (defaulting to 0/null) but not local variables
- Scheme apparently allows it in letrec (for recursion) but not in let

** TODO Report unused local variables

#+begin_quote
Extend the resolver to report an error if a local variable is never
used.
#+end_quote

** TODO Use array for variable lookup

#+begin_quote
Our resolver calculates which environment the variable is found in,
but it’s still looked up by name in that map. A more efficient
environment representation would store local variables in an array and
look them up by index.
#+end_quote

** TODO Unique index for local vars

#+begin_quote
Extend the resolver to associate a unique index for each local
variable declared in a scope. When resolving a variable access, look
up both the scope the variable is in and its index and store that. In
the interpreter, use that to quickly access a variable by its index
instead of using a map.
#+end_quote
* Classes
** DONE Static methods
CLOSED: [2025-06-27 Fr 15:27]
We have methods on instances, but there is no way to define “static”
methods that can be called directly on the class object itself. Add
support for them. Use a class keyword preceding the method to indicate
a static method that hangs off the class object.

#+begin_src lox
class Math {
  class square(n) {
    return n * n;
  }
}

print Math.square(3); // Prints "9".
#+end_src

You can solve this however you like, but the “metaclasses” used by
Smalltalk and Ruby are a particularly elegant approach. Hint: Make
LoxClass extend LoxInstance and go from there.

See branch excercise/12.1

** TODO Getters and Setters
Most modern languages support “getters” and “setters”—members on a
class that look like field reads and writes but that actually execute
user-defined code. Extend Lox to support getter methods. These are
declared without a parameter list. The body of the getter is executed
when a property with that name is accessed.

#+begin_src lox
class Circle {
  init(radius) {
    this.radius = radius;
  }

  area {
    return 3.141592653 * this.radius * this.radius;
  }
}

var circle = Circle(4);
print circle.area; // Prints roughly "50.2655".
#+end_src

** DONE Encapsulation of fields
CLOSED: [2025-06-26 Do 16:41]
#+begin_quote
Python and JavaScript allow you to freely access an object’s fields
from outside of its own methods. Ruby and Smalltalk encapsulate
instance state. Only methods on the class can access the raw fields,
and it is up to the class to decide which state is exposed. Most
statically typed languages offer modifiers like private and public to
control which parts of a class are externally accessible on a
per-member basis.

What are the trade-offs between these approaches and why might a
language prefer one or the other?
#+end_quote

The key trade-offs between open access (Python/JavaScript) vs encapsulation (Ruby/Smalltalk):

Open Access:
+ Simpler, more flexible access to object state
+ Easier debugging and testing
+ Less boilerplate code
- Can lead to tight coupling between objects
- Makes it harder to change internal implementation
- Risk of direct state manipulation bugs

Encapsulation:
+ Better information hiding
+ Easier to maintain/change implementation details
+ More control over object state
- Requires writing more accessor methods
- Can be more verbose
- May add complexity for simple use cases

The choice often reflects the language's philosophy regarding safety vs flexibility.

* Inheritance
** TODO More than single inheritance
Lox supports only single inheritance—a class may have a single
superclass and that’s the only way to reuse methods across classes.
Other languages have explored a variety of ways to more freely reuse
and share capabilities across classes: mixins, traits, multiple
inheritance, virtual inheritance, extension methods, etc.

If you were to add some feature along these lines to Lox, which would
you pick and why? If you’re feeling courageous (and you should be at
this point), go ahead and add it.

** TODO BETA's semantics
In Lox, as in most other object-oriented languages, when looking up a
method, we start at the bottom of the class hierarchy and work our way
up—a subclass’s method is preferred over a superclass’s. In order to
get to the superclass method from within an overriding method, you use
super.

The language BETA takes the opposite approach. When you call a method,
it starts at the top of the class hierarchy and works down. A
superclass method wins over a subclass method. In order to get to the
subclass method, the superclass method can call inner, which is sort
of like the inverse of super. It chains to the next method down the
hierarchy.

The superclass method controls when and where the subclass is allowed
to refine its behavior. If the superclass method doesn’t call inner at
all, then the subclass has no way of overriding or modifying the
superclass’s behavior.

Take out Lox’s current overriding and super behavior and replace it
with BETA’s semantics. In short:

- When calling a method on a class, prefer the method highest on the
  class’s inheritance chain.

- Inside the body of a method, a call to inner looks for a method with
  the same name in the nearest subclass along the inheritance chain
  between the class containing the inner and the class of this. If
  there is no matching method, the inner call does nothing.

For example:

#+begin_src lox
class Doughnut {
  cook() {
    print "Fry until golden brown.";
    inner();
    print "Place in a nice box.";
  }
}

class BostonCream < Doughnut {
  cook() {
    print "Pipe full of custard and coat with chocolate.";
  }
}

BostonCream().cook();
#+end_src

This should print:

#+begin_example
Fry until golden brown.
Pipe full of custard and coat with chocolate.
Place in a nice box.
#+end_example

** TODO Your own feature
In the chapter where I introduced Lox, I challenged you to come up
with a couple of features you think the language is missing. Now that
you know how to build an interpreter, implement one of those features.

