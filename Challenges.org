
* Evaluating Expressions

** Comparisons on types other than numbers
#+begin_quote
Would you extend Lox to support comparing other types?
#+end_quote

No

#+begin_quote
Justify your choices and compare them to other languages.
#+end_quote

While comparisons between different data types enables you to define a
total ordering in heterogeneous collections, it is mostly unintuitive
(what does "apple" < 42 mean?), adds complexity and makes the code
harder to reason about.

Seems like old Python and Javascript allows it while most others
discourage if not downright disallow it.

** Enable "scone" + 4
See branch excercise/7.2

** Divide a number by zero
#+begin_quote
What happens right now if you divide a number by zero? What do you
think should happen? Justify your choice. How do other languages you
know handle division by zero, and why do they make the choices they
do?

Change the implementation in visitBinaryExpr() to detect and report a
runtime error for this case.
#+end_quote

*** What happens right now if you divide a number by zero?
#+begin_src lox
  > 1/0==1/0
  true
#+end_src

Java, the underlying implementation language, returns Infinity if you
divide a float by 0. This apparently [[https://stackoverflow.com/a/12954429][due to the IEEE-754 standard]].
This stamdard encourages robust programs and throwing exceptions is
apprently counter to that.

*** What do you think should happen?
I think it should throw an exception.

*** How do other languages handle division by zero?
Different languages handle division by zero in these main ways:

1. Runtime Exception (Java, Python, C#, Common Lisp (sort of)):
- Throws ArithmeticException or ZeroDivisionError
- Clear indication of error
- Allows error handling via try-catch

2. Special Values (JavaScript, C/C++):
- Returns Infinity or NaN for floating-point
- Fast execution without exception overhead
- Matches IEEE 754 floating-point standard
- Can silently propagate errors

3. Undefined Behavior (C/C++ for integer division):
- No guarantees about program behavior
- Maximizes performance
- Puts responsibility on programmer

Most modern languages choose runtime exceptions because they:
- Make errors explicit
- Prevent silent failure
- Aid debugging
- Follow principle of *fail-fast*

*** Change the implementation to report a runtime error
See excercise/7.3 for the implementation.
* Statements and State
** TODO REPL support
The REPL no longer supports entering a single expression and
automatically printing its result value. That’s a drag. Add support to
the REPL to let users type in both statements and expressions. If they
enter a statement, execute it. If they enter an expression, evaluate
it and display the result value.

*** Solution
1. Either have to do a "cover grammar" as he calls it, i.e. a grammer
   that allows both statements and expressions.
2. Or catch an parse error and try to interpret it as an expression
3. Or, better yet, change the Stmt interface so that the visitor
   returns an Object, juts like the Expr visitor. Then make sure the
   ExprStmt returns the value, the BlockStmt returns the value of the
   last statement and all the other statements return null. Then just
   print the value if one was returned.

** TODO Variable initialization
Maybe you want Lox to be a little more explicit about variable
initialization. Instead of implicitly initializing variables to nil,
make it a runtime error to access a variable that has not been
initialized or assigned to, as in:

#+begin_src lox
// No initializers.
var a;
var b;

a = "assigned";
print a; // OK, was assigned first.

print b; // Error!
#+end_src

*** Solution
Use some undef value to indicate a variable has not been assigned a
value.

** DONE Use variable in declaration initialization
CLOSED: [2025-04-10 Do 14:32]
What does the following program do?

#+begin_src lox
var a = 1;
{
  var a = a + 2;
  print a;
}
#+end_src

What did you expect it to do? Is it what you think it should do? What
does analogous code in other languages you are familiar with do? What
do you think users will expect this to do?

#+begin_src clojure
> (let [a 1] (let [a (+ a 2)] a))
3
#+end_src

In clojure (and probably any scheme) it works quite naturally.

#+begin_src python
def inner():
  global a
  a = a + 2
  print(a)

a = 1
inner()
#+end_src

Python seems a bit weird as it doesn't really have block scope
independent of functions. If you use assign a variable in a function
that exists outside you have to declare as global. Maybe to avoid
mistakes.

* Control Flow

** Branching statements using functions and dynamic dispatch
A few chapters from now, when Lox supports first-class functions and
dynamic dispatch, we technically won’t need branching statements built
into the language. Show how conditional execution can be implemented
in terms of those. Name a language that uses this technique for its
control flow.

** Looping using functions and dynamic dispatch
Likewise, looping can be implemented using those same tools, provided
our interpreter supports an important optimization. What is it, and
why is it necessary? Name a language that uses this technique for
iteration.

** Break statement
Unlike Lox, most other C-style languages also support break and
continue statements inside loops. Add support for break statements.

The syntax is a break keyword followed by a semicolon. It should be a
syntax error to have a break statement appear outside of any enclosing
loop. At runtime, a break statement causes execution to jump to the
end of the nearest enclosing loop and proceeds from there. Note that
the break may be nested inside other blocks and if statements that
also need to be exited.

